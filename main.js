!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=13)}([function(t,e,r){"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.isQueryLeafNode=e.isQueryNode=e.queryTokenFromString=e.QueryToken=void 0,function(t){t[t.AND=0]="AND",t[t.OR=1]="OR",t[t.NOT=2]="NOT",t[t.SHARED=3]="SHARED"}(n=e.QueryToken||(e.QueryToken={})),e.queryTokenFromString=function(t){switch(null==t?void 0:t.toLowerCase()){case"and":return n.AND;case"or":return n.OR;case"not":return n.NOT;case"shared":return n.SHARED;default:return null}},e.isQueryNode=function(t){return void 0!==t.token},e.isQueryLeafNode=function(t){return void 0!==t.typeStr}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.QueryBuilder=e.createQueryFromIdentifierList=void 0;var n,o=r(0);!function(t){t[t.Node=0]="Node",t[t.LeafNode=1]="LeafNode"}(n||(n={})),e.createQueryFromIdentifierList=function(t){var e=!1,r=function(t){for(var n=new i,s=0;s<t.length;s++){var u=t[s].split("[");n.identifier(u[0]);var c=s===t.length-1,a=!e&&!c&&t[s+1].split("[").length>1;if(c||a){if(a){e=!0,n.token(o.QueryToken.OR),n.token(o.QueryToken.SHARED),n.append(r(t.slice(s+1,t.length)));break}}else n.token(o.QueryToken.AND)}return n.build()};return r(t)};var i=function(){function t(t){return this.root=t||{token:null},this.currentNode=this.root,this}return Object.defineProperty(t.prototype,"workingNode",{get:function(){return this.currentNode},enumerable:!1,configurable:!0}),t.prototype.identifier=function(t){return this.lastChange===n.LeafNode||(this.lastChange=n.LeafNode,this.currentNode.leftChild?this.currentNode.rightChild||(this.currentNode.rightChild={typeStr:t}):this.currentNode.leftChild={typeStr:t}),this},t.prototype.token=function(t){if(this.lastChange=n.Node,null===this.currentNode.token)this.currentNode.token=t;else if(this.currentNode.leftChild){if(this.currentNode.rightChild){var e=this.currentNode.rightChild;this.currentNode.rightChild={token:t,leftChild:e}}else this.currentNode.rightChild={token:t};this.currentNode=this.currentNode.rightChild}else this.currentNode.leftChild={token:t},this.currentNode=this.currentNode.leftChild;return this},t.prototype.append=function(t){if(this.lastChange!==n.LeafNode)if(this.currentNode.leftChild)if(this.currentNode.rightChild){this.currentNode.rightChild;this.currentNode.rightChild={token:o.QueryToken.AND,leftChild:t}}else this.currentNode.rightChild=t;else this.currentNode.leftChild=t},t.prototype.build=function(){var t=this.root;return this.root={token:null},this.currentNode=this.root,null===t.token&&(t.token=o.QueryToken.OR),t},t}();e.QueryBuilder=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DispatchSubject=void 0;var n=function(){function t(){this.observers=[]}return t.prototype.subscribe=function(t){this.observers.indexOf(t)>=0||this.observers.push(t)},t.prototype.unsubscribe=function(t){var e=this.observers.indexOf(t);e<0||this.observers.splice(e,1)},t.prototype.trigger=function(t){this.observers.forEach((function(e){return e(t)})),this.observers.length>0&&(this.observers=[])},t}();e.DispatchSubject=n},function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||e.hasOwnProperty(r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),o(r(4),e),o(r(5),e),o(r(0),e),o(r(6),e),o(r(1),e),o(r(7),e),o(r(2),e)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},function(t,e,r){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.ECSManager=e.EntityBuilder=void 0;var o=r(0),i=r(2),s=r(1),u=r(8),c=r(9),a=function(){function t(t,e){this.id=t,this.ecsManager=e}return Object.defineProperty(t.prototype,"entityId",{get:function(){return this.id},enumerable:!1,configurable:!0}),t.prototype.addComponent=function(t,e){return this.ecsManager.addComponent(this.id,t,e,this)},t.prototype.removeComponent=function(t){return this.ecsManager.removeComponent(this.id,t,this)},t}();e.EntityBuilder=a;var l=function(){function t(){this.events=[],this.systems=[],this.entities=[],this.components=new Map,this.entityId=0,this.afterUpdateLoop=new i.DispatchSubject,this.isRunningSystems=!1}return t.prototype.registerEventWithEscQuery=function(t,e){return this.events.push({query:e,qResult:this.queryEntities(e),system:t}),this.events.length-1},t.prototype.registerEvent=function(t,e){var r=s.createQueryFromIdentifierList(e);return this.registerEventWithEscQuery(t,r)},t.prototype.registerSystemWithEscQuery=function(t,e){this.systems.push({query:e,qResult:this.queryEntities(e),system:t})},t.prototype.registerSystem=function(t,e){var r=s.createQueryFromIdentifierList(e);this.registerSystemWithEscQuery(t,r)},t.prototype.createEntity=function(){return this.entities.push({id:this.entityId++}),new a(this.entityId-1,this)},t.prototype.registerComponentType=function(t,e){this.components.has(t)||this.components.set(t,new u.ComponentPool(e))},t.prototype.addComponent=function(t,e,r,n){var o=this,i=function(e){return null!=e?e:new a(t,o)};if(this.components.has(e)){var s=this.components.get(e);if(!(null==s?void 0:s.find((function(e){return e.entityId===t}))))return this.isRunningSystems?(this.afterUpdateLoop.subscribe((function(){o.addComponent(t,e,r)})),i(n)):(s.add(t,r),this.invalidateQueryResults(e),i(n))}},t.prototype.removeComponent=function(t,e,r){var n=this;if(!this.isRunningSystems)return this.components.get(e).remove(t),this.invalidateQueryResults(e),null!=r?r:new a(t,this);this.afterUpdateLoop.subscribe((function(){n.removeComponent(t,e)}))},t.prototype.queryEntities=function(t){var e,r,i,s,u=this,a=function(t,e){var r,o,i=t.findIndex((function(t){return t.id===e.id}));if(i<0)t.push(e);else{var s=function(e){t[i].components.find((function(t){return t===e}))||t[i].components.push(e)};try{for(var u=n(e.components),c=u.next();!c.done;c=u.next()){s(c.value)}}catch(t){r={error:t}}finally{try{c&&!c.done&&(o=u.return)&&o.call(u)}finally{if(r)throw r.error}}}return t},l=function(t){var e;if(!t)return[];if(!o.isQueryNode(t)){var r=t.typeStr,i=u.components.get(r);return null!==(e=null==i?void 0:i.filter((function(t){return c.isNumber(t.entityId)&&t.entityId>=0})).reduce((function(t,e,n){var o=t.findIndex((function(t){return t.id===e.entityId})),i={typeStr:r,index:n};if(o<0){var s={id:e.entityId,components:[i]};t.push(s)}else{t[o].components.find((function(t){return t.index===i.index&&t.typeStr===i.typeStr}))||t[o].components.push(i)}return t}),[]))&&void 0!==e?e:[]}var s=l(t.leftChild),f=l(t.rightChild);switch(t.token){case o.QueryToken.AND:return function(t,e){var r,o,i=[],s=function(t){var r=e.findIndex((function(e){return e.id===t.id}));if(r<0)return"continue";var n=e.splice(r,1);n.length>=1&&i.push({id:t.id,components:t.components.concat(n[0].components)})};try{for(var u=n(t),c=u.next();!c.done;c=u.next()){s(c.value)}}catch(t){r={error:t}}finally{try{c&&!c.done&&(o=u.return)&&o.call(u)}finally{if(r)throw r.error}}return i}(s,f);case o.QueryToken.OR:return s.concat(f).reduce(a,[]);case o.QueryToken.NOT:return s.filter((function(t){return!f.find((function(e){return e.id==t.id}))}));case o.QueryToken.SHARED:return[]}},f=function(t){if(t&&!o.isQueryLeafNode(t)){if(t.token===o.QueryToken.SHARED)return t;var e=f(t.leftChild),r=f(t.rightChild);return null!=e?e:r}},p=f(t),h=l(null==p?void 0:p.leftChild),d=void 0;if(h.length>0){var y=h.map((function(t){return t.components}));d=new Array(y[0].length);var v=[];try{for(var b=n(y),g=b.next();!g.done;g=b.next()){var m=g.value,w=function(t){var e=v.findIndex((function(e){return e===t.typeStr}));e<0&&(e=v.length,v.push(t.typeStr)),d[e]?d[e]=d[e].concat(S.components.get(t.typeStr).unsafeGet(t.index)):d[e]=[S.components.get(t.typeStr).unsafeGet(t.index)]},S=this;try{for(var _=(i=void 0,n(m)),E=_.next();!E.done;E=_.next()){w(E.value)}}catch(t){i={error:t}}finally{try{E&&!E.done&&(s=_.return)&&s.call(_)}finally{if(i)throw i.error}}}}catch(t){e={error:t}}finally{try{g&&!g.done&&(r=b.return)&&r.call(b)}finally{if(e)throw e.error}}}return{sharedArgs:d,entities:l(t)}},t.prototype.accessComponentData=function(t,e){var r,n=this.components.get(e);return null===(r=null==n?void 0:n.find((function(e){return e.entityId===t})))||void 0===r?void 0:r.data},t.prototype.onEvent=function(t,e){var r,o;this.isRunningSystems=!0;var i=this.events[t],s=[e];try{for(var u=n(i.qResult.entities),c=u.next();!c.done;c=u.next()){var a=c.value,l=s.concat(this.createArgs(a));this.events[t].system.apply(null,l.concat(i.qResult.sharedArgs))}}catch(t){r={error:t}}finally{try{c&&!c.done&&(o=u.return)&&o.call(u)}finally{if(r)throw r.error}}this.isRunningSystems=!1,this.afterUpdateLoop.trigger()},t.prototype.dispatch=function(){var t,e,r,o;this.isRunningSystems=!0,this.prevRun=this.prevRun?this.prevRun:Date.now();var i=Date.now(),s=[(i-this.prevRun)/1e3];try{for(var u=n(this.systems),c=u.next();!c.done;c=u.next()){var a=c.value;try{for(var l=(r=void 0,n(a.qResult.entities)),f=l.next();!f.done;f=l.next()){var p=f.value,h=s.concat(this.createArgs(p));a.system.apply(null,h.concat(a.qResult.sharedArgs))}}catch(t){r={error:t}}finally{try{f&&!f.done&&(o=l.return)&&o.call(l)}finally{if(r)throw r.error}}}}catch(e){t={error:e}}finally{try{c&&!c.done&&(e=u.return)&&e.call(u)}finally{if(t)throw t.error}}this.isRunningSystems=!1,this.afterUpdateLoop.trigger(),this.prevRun=i},t.prototype.createArgs=function(t){var e,r,o=[];try{for(var i=n(t.components),s=i.next();!s.done;s=i.next()){var u=s.value,c=this.components.get(u.typeStr).unsafeGet(u.index);o.push(c)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}return o},t.prototype.invalidateQueryResults=function(t){var e,r,i,s,u=this,c=function(t,e){return!!e&&(o.isQueryNode(e)?!!c(t,e.leftChild)||!!c(t,e.rightChild):e.typeStr===t)},a=function(e){return c(t,e.query)?u.queryEntities(e.query):e.qResult};try{for(var l=n(this.systems),f=l.next();!f.done;f=l.next()){(d=f.value).qResult=a(d)}}catch(t){e={error:t}}finally{try{f&&!f.done&&(r=l.return)&&r.call(l)}finally{if(e)throw e.error}}try{for(var p=n(this.events),h=p.next();!h.done;h=p.next()){var d;(d=h.value).qResult=a(d)}}catch(t){i={error:t}}finally{try{h&&!h.done&&(s=p.return)&&s.call(p)}finally{if(i)throw i.error}}},t}();e.ECSManager=l},function(t,e,r){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(e,"__esModule",{value:!0}),e.ComponentPool=void 0;var o=function(){function t(t,e){void 0===e&&(e=20),this.stride=e,this.pool=[],this.length=0,this.pos=0,this.defaultValue=t,this.onExpandPool(!0)}return t.prototype.add=function(t,e){this.length>=this.pool.length&&this.onExpandPool(),this.pool[this.length].entityId=t;var r=null!=e?e:this.defaultValue;this.deepAssign(this.pool[this.length].data,r),this.length+=1},t.prototype.remove=function(t){var e=this.pool.findIndex((function(e){return e.entityId===t}));if(!(e<0)){var r=this.pool[e],n=this.length-1;this.pool[e]=this.pool[n],r.entityId=-1,this.pool[n]=r,this.length=n}},t.prototype[Symbol.iterator]=function(){return this},t.prototype.next=function(){return this.pos<this.length?{done:!1,value:this.pool[this.pos++]}:(this.pos=0,{done:!0,value:null})},t.prototype.unsafeGet=function(t){return this.pool[t]},t.prototype.find=function(t,e){var r,o;try{for(var i=n(this),s=i.next();!s.done;s=i.next()){var u=s.value;if(t(u,0,this.pool))return this.pos=0,u}}catch(t){r={error:t}}finally{try{s&&!s.done&&(o=i.return)&&o.call(i)}finally{if(r)throw r.error}}return null},t.prototype.filter=function(t,e){var r,o,i=[],s=0;try{for(var u=n(this),c=u.next();!c.done;c=u.next()){var a=c.value;t(a,s,this.pool)&&i.push(a),s+=1}}catch(t){r={error:t}}finally{try{c&&!c.done&&(o=u.return)&&o.call(u)}finally{if(r)throw r.error}}return i},t.prototype.onExpandPool=function(t){t?this.pool=new Array(this.stride):this.pool.length+=this.stride;for(var e=this.length;e<this.pool.length;e++)this.pool[e]={entityId:-1,data:this.deepCopy(this.defaultValue)}},t.prototype.deepCopy=function(t){if(!t||"object"!=typeof t)return t;var e=Array.isArray(t)?[]:{};for(var r in t)e[r]=this.deepCopy(t[r]);return e},t.prototype.deepAssign=function(t,e){for(var r in Object.assign(t,e),e)"object"==typeof t[r]&&this.deepAssign(t[r],e[r])},t}();e.ComponentPool=o},function(t,e,r){(function(t){var n=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),r={},n=0;n<e.length;n++)r[e[n]]=Object.getOwnPropertyDescriptor(t,e[n]);return r},o=/%[sdj%]/g;e.format=function(t){if(!b(t)){for(var e=[],r=0;r<arguments.length;r++)e.push(u(arguments[r]));return e.join(" ")}r=1;for(var n=arguments,i=n.length,s=String(t).replace(o,(function(t){if("%%"===t)return"%";if(r>=i)return t;switch(t){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(t){return"[Circular]"}default:return t}})),c=n[r];r<i;c=n[++r])y(c)||!w(c)?s+=" "+c:s+=" "+u(c);return s},e.deprecate=function(r,n){if(void 0!==t&&!0===t.noDeprecation)return r;if(void 0===t)return function(){return e.deprecate(r,n).apply(this,arguments)};var o=!1;return function(){if(!o){if(t.throwDeprecation)throw new Error(n);t.traceDeprecation?console.trace(n):console.error(n),o=!0}return r.apply(this,arguments)}};var i,s={};function u(t,r){var n={seen:[],stylize:a};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),d(r)?n.showHidden=r:r&&e._extend(n,r),g(n.showHidden)&&(n.showHidden=!1),g(n.depth)&&(n.depth=2),g(n.colors)&&(n.colors=!1),g(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=c),l(n,t,n.depth)}function c(t,e){var r=u.styles[e];return r?"["+u.colors[r][0]+"m"+t+"["+u.colors[r][1]+"m":t}function a(t,e){return t}function l(t,r,n){if(t.customInspect&&r&&E(r.inspect)&&r.inspect!==e.inspect&&(!r.constructor||r.constructor.prototype!==r)){var o=r.inspect(n,t);return b(o)||(o=l(t,o,n)),o}var i=function(t,e){if(g(e))return t.stylize("undefined","undefined");if(b(e)){var r="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(r,"string")}if(v(e))return t.stylize(""+e,"number");if(d(e))return t.stylize(""+e,"boolean");if(y(e))return t.stylize("null","null")}(t,r);if(i)return i;var s=Object.keys(r),u=function(t){var e={};return t.forEach((function(t,r){e[t]=!0})),e}(s);if(t.showHidden&&(s=Object.getOwnPropertyNames(r)),_(r)&&(s.indexOf("message")>=0||s.indexOf("description")>=0))return f(r);if(0===s.length){if(E(r)){var c=r.name?": "+r.name:"";return t.stylize("[Function"+c+"]","special")}if(m(r))return t.stylize(RegExp.prototype.toString.call(r),"regexp");if(S(r))return t.stylize(Date.prototype.toString.call(r),"date");if(_(r))return f(r)}var a,w="",x=!1,O=["{","}"];(h(r)&&(x=!0,O=["[","]"]),E(r))&&(w=" [Function"+(r.name?": "+r.name:"")+"]");return m(r)&&(w=" "+RegExp.prototype.toString.call(r)),S(r)&&(w=" "+Date.prototype.toUTCString.call(r)),_(r)&&(w=" "+f(r)),0!==s.length||x&&0!=r.length?n<0?m(r)?t.stylize(RegExp.prototype.toString.call(r),"regexp"):t.stylize("[Object]","special"):(t.seen.push(r),a=x?function(t,e,r,n,o){for(var i=[],s=0,u=e.length;s<u;++s)C(e,String(s))?i.push(p(t,e,r,n,String(s),!0)):i.push("");return o.forEach((function(o){o.match(/^\d+$/)||i.push(p(t,e,r,n,o,!0))})),i}(t,r,n,u,s):s.map((function(e){return p(t,r,n,u,e,x)})),t.seen.pop(),function(t,e,r){if(t.reduce((function(t,e){return e.indexOf("\n")>=0&&0,t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return r[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+r[1];return r[0]+e+" "+t.join(", ")+" "+r[1]}(a,w,O)):O[0]+w+O[1]}function f(t){return"["+Error.prototype.toString.call(t)+"]"}function p(t,e,r,n,o,i){var s,u,c;if((c=Object.getOwnPropertyDescriptor(e,o)||{value:e[o]}).get?u=c.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):c.set&&(u=t.stylize("[Setter]","special")),C(n,o)||(s="["+o+"]"),u||(t.seen.indexOf(c.value)<0?(u=y(r)?l(t,c.value,null):l(t,c.value,r-1)).indexOf("\n")>-1&&(u=i?u.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+u.split("\n").map((function(t){return"   "+t})).join("\n")):u=t.stylize("[Circular]","special")),g(s)){if(i&&o.match(/^\d+$/))return u;(s=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=t.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=t.stylize(s,"string"))}return s+": "+u}function h(t){return Array.isArray(t)}function d(t){return"boolean"==typeof t}function y(t){return null===t}function v(t){return"number"==typeof t}function b(t){return"string"==typeof t}function g(t){return void 0===t}function m(t){return w(t)&&"[object RegExp]"===x(t)}function w(t){return"object"==typeof t&&null!==t}function S(t){return w(t)&&"[object Date]"===x(t)}function _(t){return w(t)&&("[object Error]"===x(t)||t instanceof Error)}function E(t){return"function"==typeof t}function x(t){return Object.prototype.toString.call(t)}function O(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(r){if(g(i)&&(i=t.env.NODE_DEBUG||""),r=r.toUpperCase(),!s[r])if(new RegExp("\\b"+r+"\\b","i").test(i)){var n=t.pid;s[r]=function(){var t=e.format.apply(e,arguments);console.error("%s %d: %s",r,n,t)}}else s[r]=function(){};return s[r]},e.inspect=u,u.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},u.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=h,e.isBoolean=d,e.isNull=y,e.isNullOrUndefined=function(t){return null==t},e.isNumber=v,e.isString=b,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=g,e.isRegExp=m,e.isObject=w,e.isDate=S,e.isError=_,e.isFunction=E,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=r(11);var T=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function j(){var t=new Date,e=[O(t.getHours()),O(t.getMinutes()),O(t.getSeconds())].join(":");return[t.getDate(),T[t.getMonth()],e].join(" ")}function C(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){console.log("%s - %s",j(),e.format.apply(e,arguments))},e.inherits=r(12),e._extend=function(t,e){if(!e||!w(e))return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t};var P="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function N(t,e){if(!t){var r=new Error("Promise was rejected with a falsy value");r.reason=t,t=r}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(P&&t[P]){var e;if("function"!=typeof(e=t[P]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,P,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,r,n=new Promise((function(t,n){e=t,r=n})),o=[],i=0;i<arguments.length;i++)o.push(arguments[i]);o.push((function(t,n){t?r(t):e(n)}));try{t.apply(this,o)}catch(t){r(t)}return n}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),P&&Object.defineProperty(e,P,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,n(t))},e.promisify.custom=P,e.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function r(){for(var r=[],n=0;n<arguments.length;n++)r.push(arguments[n]);var o=r.pop();if("function"!=typeof o)throw new TypeError("The last argument must be of type Function");var i=this,s=function(){return o.apply(i,arguments)};e.apply(this,r).then((function(e){t.nextTick(s,null,e)}),(function(e){t.nextTick(N,e,s)}))}return Object.setPrototypeOf(r,Object.getPrototypeOf(e)),Object.defineProperties(r,n(e)),r}}).call(this,r(10))},function(t,e){var r,n,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function u(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(t){r=i}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(t){n=s}}();var c,a=[],l=!1,f=-1;function p(){l&&c&&(l=!1,c.length?a=c.concat(a):f=-1,a.length&&h())}function h(){if(!l){var t=u(p);l=!0;for(var e=a.length;e;){for(c=a,a=[];++f<e;)c&&c[f].run();f=-1,e=a.length}c=null,l=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function y(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];a.push(new d(t,e)),1!==a.length||l||u(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}},function(t,e,r){"use strict";r.r(e);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)};function o(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function i(t){return"function"==typeof t}var s=!1,u={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;s=t},get useDeprecatedSynchronousErrorHandling(){return s}};function c(t){setTimeout((function(){throw t}),0)}var a={closed:!0,next:function(t){},error:function(t){if(u.useDeprecatedSynchronousErrorHandling)throw t;c(t)},complete:function(){}},l=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}();var f=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),p=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var e;if(!this.closed){var r,n=this._parentOrParents,o=this._unsubscribe,s=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof t)n.remove(this);else if(null!==n)for(var u=0;u<n.length;++u){n[u].remove(this)}if(i(o))try{o.call(this)}catch(t){e=t instanceof f?h(t.errors):[t]}if(l(s)){u=-1;for(var c=s.length;++u<c;){var a=s[u];if(null!==(r=a)&&"object"==typeof r)try{a.unsubscribe()}catch(t){e=e||[],t instanceof f?e=e.concat(h(t.errors)):e.push(t)}}}if(e)throw new f(e)}},t.prototype.add=function(e){var r=e;if(!e)return t.EMPTY;switch(typeof e){case"function":r=new t(e);case"object":if(r===this||r.closed||"function"!=typeof r.unsubscribe)return r;if(this.closed)return r.unsubscribe(),r;if(!(r instanceof t)){var n=r;(r=new t)._subscriptions=[n]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var o=r._parentOrParents;if(null===o)r._parentOrParents=this;else if(o instanceof t){if(o===this)return r;r._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return r;o.push(this)}var i=this._subscriptions;return null===i?this._subscriptions=[r]:i.push(r),r},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var r=e.indexOf(t);-1!==r&&e.splice(r,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function h(t){return t.reduce((function(t,e){return t.concat(e instanceof f?e.errors:e)}),[])}var d=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),y=function(t){function e(r,n,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=a;break;case 1:if(!r){i.destination=a;break}if("object"==typeof r){r instanceof e?(i.syncErrorThrowable=r.syncErrorThrowable,i.destination=r,r.add(i)):(i.syncErrorThrowable=!0,i.destination=new v(i,r));break}default:i.syncErrorThrowable=!0,i.destination=new v(i,r,n,o)}return i}return o(e,t),e.prototype[d]=function(){return this},e.create=function(t,r,n){var o=new e(t,r,n);return o.syncErrorThrowable=!1,o},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(p),v=function(t){function e(e,r,n,o){var s,u=t.call(this)||this;u._parentSubscriber=e;var c=u;return i(r)?s=r:r&&(s=r.next,n=r.error,o=r.complete,r!==a&&(i((c=Object.create(r)).unsubscribe)&&u.add(c.unsubscribe.bind(c)),c.unsubscribe=u.unsubscribe.bind(u))),u._context=c,u._next=s,u._error=n,u._complete=o,u}return o(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;u.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,r=u.useDeprecatedSynchronousErrorHandling;if(this._error)r&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)r?(e.syncErrorValue=t,e.syncErrorThrown=!0):c(t),this.unsubscribe();else{if(this.unsubscribe(),r)throw t;c(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var r=function(){return t._complete.call(t._context)};u.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,r),this.unsubscribe()):(this.__tryOrUnsub(r),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),u.useDeprecatedSynchronousErrorHandling)throw t;c(t)}},e.prototype.__tryOrSetError=function(t,e,r){if(!u.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,r)}catch(e){return u.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(c(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(y);var b=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function g(t){return t}function m(t){return 0===t.length?g:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var w=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var r=new t;return r.source=this,r.operator=e,r},t.prototype.subscribe=function(t,e,r){var n=this.operator,o=function(t,e,r){if(t){if(t instanceof y)return t;if(t[d])return t[d]()}return t||e||r?new y(t,e,r):new y(a)}(t,e,r);if(n?o.add(n.call(o,this.source)):o.add(this.source||u.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),u.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){u.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),!function(t){for(;t;){var e=t,r=e.closed,n=e.destination,o=e.isStopped;if(r||o)return!1;t=n&&n instanceof y?n:null}return!0}(t)?console.warn(e):t.error(e)}},t.prototype.forEach=function(t,e){var r=this;return new(e=S(e))((function(e,n){var o;o=r.subscribe((function(e){try{t(e)}catch(t){n(t),o&&o.unsubscribe()}}),n,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[b]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:m(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=S(t))((function(t,r){var n;e.subscribe((function(t){return n=t}),(function(t){return r(t)}),(function(){return t(n)}))}))},t.create=function(e){return new t(e)},t}();function S(t){if(t||(t=u.Promise||Promise),!t)throw new Error("no Promise impl found");return t}var _=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new E(t,this.project,this.thisArg))},t}(),E=function(t){function e(e,r,n){var o=t.call(this,e)||this;return o.project=r,o.count=0,o.thisArg=n||o,o}return o(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(y);function x(t,e,r,n){return i(r)&&(n=r,r=void 0),n?x(t,e,r).pipe((o=function(t){return l(t)?n.apply(void 0,t):n(t)},function(t){if("function"!=typeof o)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return t.lift(new _(o,s))})):new w((function(n){!function t(e,r,n,o,i){var s;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var u=e;e.addEventListener(r,n,i),s=function(){return u.removeEventListener(r,n,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var c=e;e.on(r,n),s=function(){return c.off(r,n)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var a=e;e.addListener(r,n),s=function(){return a.removeListener(r,n)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var l=0,f=e.length;l<f;l++)t(e[l],r,n,o,i)}o.add(s)}(t,e,(function(t){arguments.length>1?n.next(Array.prototype.slice.call(arguments)):n.next(t)}),n,r)}));var o,s}var O=new(r(3).ECSManager);O.registerComponentType("Circle",{radius:10}),O.registerComponentType("Position",{x:0,y:0}),O.registerComponentType("Velocity",{x:0,y:0}),O.registerComponentType("Colored",{color:"#ff0000"}),O.registerComponentType("UniqueTag",{}),x(window,"DOMContentLoaded").subscribe((function(){var t=document.getElementById("waveShootCanvas");if(t){t.width=window.innerWidth,t.height=window.innerHeight;for(var e=t.getContext("2d"),r=function(t,e){var r=O.createEntity().entityId,n=40*Math.random();O.addComponent(r,"Circle",{radius:n}),O.addComponent(r,"Position",{x:t,y:e}),O.addComponent(r,"Velocity",{x:8*Math.random()+2,y:8*Math.random()+2}),O.addComponent(r,"Colored",{color:"#"+(16777215*Math.random()<<0).toString(16)})},n=0;n<500;n++)r(Math.random()*t.width,Math.random()*t.height);O.registerSystem((function(t,r,n,o){e.beginPath(),e.strokeStyle=o.data.color,e.arc(n.data.x,n.data.y,r.data.radius,0,2*Math.PI),e.stroke()}),["Circle","Position","Colored"]);O.registerSystem((function(t,e,r){e.data.x+=r.data.x*t,e.data.y+=r.data.y*t}),["Position","Velocity"]);O.registerSystem((function(e,r,n){r.data.x-2*n.data.radius>t.width&&r.data.y-2*n.data.radius>t.height&&(r.data.x=-Math.random()*(.05*t.width),r.data.y=-Math.random()*(.05*t.height))}),["Position","Circle"]);var o=O.createEntity().entityId;O.addComponent(o,"UniqueTag",{});var i=O.registerEvent((function(e,n){var o=e;r(o.x-t.offsetLeft,o.y-t.offsetTop)}),["UniqueTag"]);x(t,"click").subscribe((function(t){return O.onEvent(i,t)}));var s=function(){e.fillStyle="#000000",e.fillRect(0,0,t.width,t.height),O.dispatch(),window.requestAnimationFrame(s)};window.requestAnimationFrame(s)}else console.error("failed to load canvas!")}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,